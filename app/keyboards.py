from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                           InlineKeyboardButton, InlineKeyboardMarkup,
                           ReplyKeyboardRemove)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from math import ceil

remove_keyboard = ReplyKeyboardRemove()

def start_keyboard(isadmin: bool) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='–í–æ–π—Ç–∏ –≤ –ª–æ–±–±–∏'))
    if isadmin:
        builder.add(KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏'))
    return builder.as_markup()

def lobbies_keyboard(lobbies: list[int]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for id in lobbies:
        builder.add(InlineKeyboardButton(text=str(id), callback_data=f'enter {id}'))
    return builder.adjust(5).as_markup()

def inlobby_keyboard(isadmin: bool) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    if isadmin:
        builder.add(KeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'))
    builder.add(KeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏'))
    return builder.as_markup()

def ingame_keyboard(isadmin: bool) -> ReplyKeyboardMarkup | ReplyKeyboardRemove:
    if isadmin:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏')]]
        )
    else:
        return ReplyKeyboardRemove()

def __list_for_stone(is_here: bool, info: list[int]) -> str:
    s = ''
    if is_here:
        s += '@ '
    s += ' '.join(map(str, info))
    return s

def field_keyboard(info: dict[int, tuple[int, list[int]]], max_stone: int, round: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text=f'üè† {__list_for_stone(*info[0])}', 
        callback_data=f'pick 0 {round}'
    )
    for key in range(1, max_stone + 1):
        if key in info.keys():
            builder.button(
                text=f'ü™® {__list_for_stone(*info[key])}',
                callback_data=f'pick {key} {round}'
            )
        else:
            builder.button(
                text='‚ùå',
                callback_data=f'pick empty {round}'
            )
    builder.adjust(1, ceil(max_stone**0.5))
    return builder.as_markup()

def between_rounds_keyboard(isadmin: bool) -> ReplyKeyboardMarkup | ReplyKeyboardRemove:
    if isadmin:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥')],
                      [KeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É')],
                      [KeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏')]]
        )
    else:
        return ReplyKeyboardRemove()